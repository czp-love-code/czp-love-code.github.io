<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈泽平的博客</title>
  
  <subtitle>Always keep it positive</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-22T07:19:10.157Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>耐清</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>枚举类型使用注意事项</title>
    <link href="http://yoursite.com/articles/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html"/>
    <id>http://yoursite.com/articles/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</id>
    <published>2019-12-22T04:23:58.000Z</published>
    <updated>2019-12-22T07:19:10.157Z</updated>
    
    <content type="html"><![CDATA[<p>未命名的enum只能在定义该enum时定义它的对象（分号前面）</p><a id="more"></a><p>枚举成员是const，提供初始值时必须是常量表达式，同时，我们也可以在任何需要常量表达式的地方使用枚举成员。如使用enum作为switch语句的表达式，而将枚举值作为case标签，也能将枚举类型作为非类型模板形参使用，或者在类的定义中初始化枚举类型的静态数据成员</p><p>初始化已命名的enum对象或对其赋值必须使用一个枚举成员或该类型的另一个对象，同时我们不能将整型值传给enum形参，但是可以将一个不限定作用域的枚举类型的对象或枚举成员传给整型形参，因为一个不限定作用域的枚举类型的对象或枚举成员自动转换为整型，而限定作用域的枚举类型则不会进行这样的隐式转换。<br>此时enum的值类型进行提升，但是永远不会提升成unsigned char，即使枚举值可以用unsigned char存储也是如此</p><p>默认情况下限定作用域的enum成员类型是int，我们可以进行指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum adsa:unsigned long long&#123;</span><br><span class="line">-------</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于不限定作用域的枚举类型的枚举成员则不存在默认类型，一般认为足够大够容纳枚举值，如果我们再指定大小的话容易引发程序错误</p><p>枚举类型的前置声明必须指定其成员的大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum adsa:unsigned long long;</span><br><span class="line">enum class opadsa;&#x2F;&#x2F;限定作用域默认为int</span><br></pre></td></tr></table></figure><p>我们不可以在同一个上下文先声明一个限定作用域的enum名字，再声明一个不限定作用域的同名enum；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;未命名的enum只能在定义该enum时定义它的对象（分号前面）&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C++ Primer" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C-Primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>使用using的别名声明与typedef的区别</title>
    <link href="http://yoursite.com/articles/%E5%88%AB%E5%90%8D%E5%A3%B0%E6%98%8E%E4%B8%8Etypedef%E7%9A%84%E5%8C%BA%E5%88%AB.html"/>
    <id>http://yoursite.com/articles/%E5%88%AB%E5%90%8D%E5%A3%B0%E6%98%8E%E4%B8%8Etypedef%E7%9A%84%E5%8C%BA%E5%88%AB.html</id>
    <published>2019-12-22T03:09:25.000Z</published>
    <updated>2019-12-22T03:22:40.116Z</updated>
    
    <content type="html"><![CDATA[<p>使用using的别名声明和typedef完成的是一模一样的工作，那么两个之间有什么区别呢？</p><a id="more"></a><p>一个最重要的区别就是使用using的别名声明可以直接进行模板化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">using MyAllocList&#x3D;std::list&lt;T,MyAlooc&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">MyAllocList&lt;Widget&gt; lw;</span><br></pre></td></tr></table></figure><p>而使用typedef的话，就需要将类型放置在类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">struct MyAllocList&#123;</span><br><span class="line">typedef std::list&lt;T,MyAlloc&lt;T&gt;&gt; type;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;使用模板实例下的类型别名;</span><br><span class="line">MyAllocList&lt;Widget&gt;::type lw;</span><br></pre></td></tr></table></figure><p>此外，如果要在模板内使用typedef来创建一个成员，而且它的类型由模板形参指定的话，就需要添加前缀typename来告知编译器这是一个类型成员，而不是static成员(如果是使用using声明的别名则可以直接使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Widget&#123;</span><br><span class="line">private:</span><br><span class="line">typename MyAllocList&lt;T&gt;::type list;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用using的别名声明和typedef完成的是一模一样的工作，那么两个之间有什么区别呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Effective Modern C++" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Effective-Modern-C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>如何使用红黑树实现关联容器map</title>
    <link href="http://yoursite.com/articles/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8map(%E5%BE%85%E6%9B%B4%E6%96%B0%EF%BC%89.html"/>
    <id>http://yoursite.com/articles/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8map(%E5%BE%85%E6%9B%B4%E6%96%B0%EF%BC%89.html</id>
    <published>2019-12-20T03:22:55.000Z</published>
    <updated>2019-12-20T07:50:42.846Z</updated>
    
    <content type="html"><![CDATA[<p>关联容器map是一个pair&lt;const key_type,value_type&gt;，基于此建立了从key到value的映射，并且相关的复杂度是log(N)。那么如何使用红黑树来实现它呢？</p><a id="more"></a><p>首先建立一个红黑树的结点结构体，并且这个结点要关联到map的元素，即一个pair数据成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &lt;utility&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">enum COLOR&#123;RED,BLACK&#125;;</span><br><span class="line"></span><br><span class="line">template &lt;typename Key_type,typename Value_type&gt;</span><br><span class="line">struct RBTreeNode&#123;</span><br><span class="line">RBTreeNode&lt;Key_type, Value_type&gt;* left;</span><br><span class="line">RBTreeNode&lt;Key_type, Value_type&gt;* right;</span><br><span class="line">RBTreeNode&lt;Key_type, Value_type&gt;* parent;</span><br><span class="line">pair&lt;Key_type, Value_type&gt; value;</span><br><span class="line">COLOR color;</span><br><span class="line">RBTreeNode(const Key_type&amp; key &#x3D; Key_type(), const Value_type&amp; value&#x3D;Value_type(),COLOR Color&#x3D;RED)</span><br><span class="line">:left(NULL),right(NULL),parent(NULL),value(key,value),color(Color)&#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有了红黑树的结点，现在假想我们已经有了一颗以map元素类型为结点的红黑树。那么要遍历一个map容器来进行搜索的话我们就需要遍历这颗红黑树，即从它关键值最小的结点遍历到关键值最大的结点。那么我们就需要一种操作（一个类）来进行红黑树的遍历。不难想到可以构建一个红黑树的迭代器来实现这个遍历操作。</p><p>我们知道，迭代器的begin()指向容器的首元素（最小元素），而end()指向容器的尾后元素（最大元素的后一个位置），那么对于一颗红黑树而言，我们就需要另外构建一个尾后结点来让迭代器的end()指向它。假设这个结点命名为header，因为这个结点不能破坏原先红黑树的性质，、所以不能是黑色，只能是红色。</p><p>现在我们需要将这个游离的结点与原先的红黑树相连接，考虑到我们是打算构建一个迭代器，那么就需要将header与树中最小和最大结点连接，假设树中最小元素为minNode，最大元素为maxNode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header-&gt;left&#x3D;minNode;</span><br><span class="line">header-&gt;right&#x3D;maxNode;</span><br></pre></td></tr></table></figure><p>即我们构建的迭代器的begin()指向header的左孩子，而end()指向header，end()后退一步就指向header的右孩子。</p><p>最后这个header结点还需要连接parent，此时我们可以把它和原先树中的根节点互联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header-&gt;parent&#x3D;rootNode;</span><br><span class="line">rootNode-&gt;parent&#x3D;header;</span><br></pre></td></tr></table></figure><p>接下来就可以开心地实现红黑树地迭代器了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename Key_type,typename Value_type&gt;</span><br><span class="line">class RBTreeIterator</span><br><span class="line">&#123;</span><br><span class="line">typedef RBTreeNode&lt;Key_type, Value_type&gt; Node;</span><br><span class="line">typedef node* NodePtr;</span><br><span class="line">typedef RBTreeIterator&lt;Key_type, Value_type&gt; self;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">RBTreeIterator(NodePtr node_ptr&#x3D;nullptr):nodePtr(node_ptr)&#123;&#125;</span><br><span class="line">RBTreeIterator(const self&amp; s) :nodePtr(s.nodePtr)&#123;&#125;</span><br><span class="line"></span><br><span class="line">pair&lt;Key_type, Value_type&gt;&amp; operator*() &#123;</span><br><span class="line">return nodePtr-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;Key_type, Value_type&gt;* operator-&gt;() &#123;</span><br><span class="line">return &amp;(operator*()):</span><br><span class="line">&#125;</span><br><span class="line">self&amp; operator++() &#123;</span><br><span class="line">RBTreeItIncrement();</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">self operator++(int) &#123;</span><br><span class="line">self tmp(*this);</span><br><span class="line">RBTreeItIncrement();</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line">self&amp; operator--() &#123;</span><br><span class="line">RBTreeItDeCrement();</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">self operator--(int) &#123;</span><br><span class="line">self tmp(*this);</span><br><span class="line">RBTreeItDecrement();</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line">bool operator&#x3D;&#x3D;(const self&amp; s) &#123;</span><br><span class="line">return nodePtr &#x3D;&#x3D; s.nodePtr;</span><br><span class="line">&#125;</span><br><span class="line">bool operator!&#x3D;(const self&amp; s) &#123;</span><br><span class="line">return !(this &#x3D;&#x3D; s);</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">void RBTreeItIncrement() &#123;</span><br><span class="line">if (nodePtr-&gt;right) &#123;</span><br><span class="line">nodePtr &#x3D; nodePtr-&gt;right;</span><br><span class="line">while (nodePtr-&gt;left)</span><br><span class="line">nodePtr &#x3D; nodePtr-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">NodePtr nodeParent &#x3D; nodePtr-&gt;parent;</span><br><span class="line">while (nodePtr &#x3D;&#x3D; nodeParent-&gt;right) &#123;</span><br><span class="line">nodePtr &#x3D; nodeParent;</span><br><span class="line">nodeParent &#x3D; nodePtr-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">if (nodePtr-&gt;right !&#x3D; nodeParent)</span><br><span class="line">nodePtr &#x3D; nodeParent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void RBTreeItDecrement() &#123;</span><br><span class="line">if (nodePtr-&gt;parent-&gt;parent &#x3D;&#x3D; nodePtr &amp;&amp; nodePtr-&gt;color &#x3D;&#x3D; RED)</span><br><span class="line">nodePtr &#x3D; nodePtr-&gt;right;</span><br><span class="line">else if (nodePtr-&gt;left) &#123;</span><br><span class="line">nodePtr &#x3D; nodePtr-&gt;left;</span><br><span class="line">while (nodePtr-&gt;right)</span><br><span class="line">nodePtr &#x3D; nodePtr-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">NodePtr nodeParent &#x3D; nodePtr-&gt;parent;</span><br><span class="line">while (nodePtr &#x3D;&#x3D; nodePtr-&gt;left) &#123;</span><br><span class="line">nodePtr &#x3D; nodeParent;</span><br><span class="line">nodeParent &#x3D; nodePtr-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">nodePtr &#x3D; nodeParent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">NodePtr nodePtr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关联容器map是一个pair&amp;lt;const key_type,value_type&amp;gt;，基于此建立了从key到value的映射，并且相关的复杂度是log(N)。那么如何使用红黑树来实现它呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="STL源码剖析" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/STL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>为什么说vector的接口设计是败笔</title>
    <link href="http://yoursite.com/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4vector%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E6%98%AF%E8%B4%A5%E7%AC%94.html"/>
    <id>http://yoursite.com/articles/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4vector%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E6%98%AF%E8%B4%A5%E7%AC%94.html</id>
    <published>2019-12-18T15:03:09.000Z</published>
    <updated>2019-12-18T15:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个类的设计者，我们应该把构造函数设计成客户无论使用小括号还是大括号都不会影响要调用的重载版本，而vector的构造函数却恰恰破坏了这个隐性规定。我们知道，在构造一个vector的时候，使用大小括号来构造对象会产生完全不一样的结果。</p><a id="more"></a><p>为什么会这样呢？<br>首先，使用大括号来进行初始化对象有三个特点，第一个特点就是它禁止了会损失精度的隐式转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">double x,y,z;</span><br><span class="line">int sum&#123;x+y+z&#125;; &#x2F;&#x2F;错误</span><br></pre></td></tr></table></figure><p>第二个特点就是不会变成一个函数的声明，因为用小括号来调用不带参数的构造函数的时候就会变成一个函数的声明，而大括号则不会，依旧会调用没有形参的构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Widget w1();&#x2F;&#x2F;这是一个函数声明</span><br><span class="line">Widget w2&#123; &#125;;&#x2F;&#x2F;这调用了没有形参的构造函数</span><br></pre></td></tr></table></figure><p>第三个特点就是在构造函数的重载决议期间，只要大括号内的实参能与带std::initializer_list类型的形参匹配或进行隐式转换，就会调用这个构造函数，而若是存在带std::initializer_list类型的形参的构造函数，而实参与形参之间需要进行转换且转换会损失精度，那么就会出错。此外如果该构造函数的形参与实参完全不匹配（无法进行隐式转换，如实参int形参string），才会考虑其他的候选函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Widget(std::initializer_list&lt;bool&gt; il);&#x2F;&#x2F;其中一个构造函数</span><br><span class="line"></span><br><span class="line">Widget w&#123;10,5.0&#125;;&#x2F;&#x2F;错误，bool无法精确表示这两个值中的任何一个</span><br><span class="line"></span><br><span class="line">Widget(std::initializer_list&lt;string&gt; il)&#x2F;&#x2F;其中一个构造函数</span><br><span class="line"></span><br><span class="line">Widget w2&#123;10,5.0&#125;; &#x2F;&#x2F;考虑匹配其他构造函数</span><br></pre></td></tr></table></figure><p>还有一点需要注意的就是当实参为空的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Widget w1&#123; &#125;;&#x2F;&#x2F;调用默认构造函数</span><br><span class="line">Widget w2 (&#123; &#125;);&#x2F;&#x2F;调用带std::initializer_list的构造函数</span><br><span class="line">Widget w2 &#123;&#123; &#125;&#125;;&#x2F;&#x2F;调用带std::initializer_list的构造函数</span><br></pre></td></tr></table></figure><p>我们知道vector中有一个带initializer_list的构造函数和一个不带initializer_list形参的构造函数，那么用大小括号来初始化它的对象的时候，就会出现完全不一样的结果，但是我们原先却是希望无论使用大小括号都不要影响到调用的重载版本的。所以才说vector的接口设计就是败笔</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个类的设计者，我们应该把构造函数设计成客户无论使用小括号还是大括号都不会影响要调用的重载版本，而vector的构造函数却恰恰破坏了这个隐性规定。我们知道，在构造一个vector的时候，使用大小括号来构造对象会产生完全不一样的结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Effective Modern C++" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Effective-Modern-C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>如何理解auto与隐形代理类之间的冲突</title>
    <link href="http://yoursite.com/articles/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3auto%E4%B8%8E%E4%BB%A3%E7%90%86%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%86%B2%E7%AA%81.html"/>
    <id>http://yoursite.com/articles/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3auto%E4%B8%8E%E4%BB%A3%E7%90%86%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%86%B2%E7%AA%81.html</id>
    <published>2019-12-18T04:07:13.000Z</published>
    <updated>2019-12-18T05:51:37.953Z</updated>
    
    <content type="html"><![CDATA[<p>代理类：指为了模拟或增广其他类型的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;bool&gt;类下的operator[ ]返回一个隐形代理类对象，即std::vector&lt;bool&gt;::reference对象</span><br><span class="line"></span><br><span class="line">std::bitset::reference也是同样的隐形代理类</span><br></pre></td></tr></table></figure><a id="more"></a><p>为什么说是隐形？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;bool&gt;是一个经过特例化的类，它的对象采用了一种压缩的方式表示其特有的bool元素，</span><br><span class="line">每一个bool元素用一个比特来表示。</span><br><span class="line">因为C++中禁止了比特的引用，所以它的operator[ ]不能返回bool&amp;。</span><br><span class="line">那么它就需要返回一个像bool&amp;的对象。</span><br><span class="line">即需要模拟bool&amp;，就是用std::vector&lt;bool&gt;::reference这个代理类对象来代理bool&amp;,</span><br><span class="line">所以要保证它像bool&amp;，而且所有能用bool&amp;的地方都能用这个对象代替。</span><br></pre></td></tr></table></figure><p>那么auto为什么会与隐形代理类有冲突呢？<br>考虑下面这个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;bool&gt; reference(const Widget &amp;w);</span><br><span class="line">Widget w;</span><br><span class="line">auto highPriority&#x3D;features(w)[5];</span><br><span class="line">processWidet(w,highPriority);&#x2F;&#x2F;未定义行为</span><br></pre></td></tr></table></figure><p>为什么最后会是未定义的行为呢？因为processWidget函数中的highPriority参数中接受的实参是一个指针，然后这个指针指向了一个临时对象。<br>下面来一步步剖析这个行为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首先features(w)产生一个std::vector&lt;bool&gt;临时对象temp,</span><br><span class="line">执行opterator[ ]后产生一个std::vector&lt;bool&gt;::reference的代理类对象，</span><br><span class="line">这个对象中含有一个指向临时对象temp中的指针，然后再加上5个偏移量。</span><br><span class="line">而processWidget函数中的参数拷贝了这个指针的地址，</span><br><span class="line">在auto highPriority&#x3D;features(w)[5]这条表达式结束的时候，</span><br><span class="line">临时对象temp销毁，但我们却还在后面使用了一个指向这个临时对象temp的指针，</span><br><span class="line">该指针就变成了一个空悬指针，最后就导致了未定义行为。</span><br></pre></td></tr></table></figure><p>那么如何避免这种行为呢？<br>可以采用直接转换的方式，将产生的那个临时对象temp中的某个地址的bool值拷贝下来即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool highPriority&#x3D;features(w)[5];</span><br></pre></td></tr></table></figure><p>也同样可以使用auto+强制类型转换的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto highPriority&#x3D;static_cast&lt;bool&gt;(features(w)[5]);</span><br></pre></td></tr></table></figure><p>综上，auto表达式右边不能直接使用代理类对象，因为auto会推断出一个代理类对象的类型，而不是它想要的类型，就上面这个例子而言，它想要的是一个bool值，而不是一个指向临时对象中的bool的指针。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理类：指为了模拟或增广其他类型的类&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vector&amp;lt;bool&amp;gt;类下的operator[ ]返回一个隐形代理类对象，即std::vector&amp;lt;bool&amp;gt;::reference对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::bitset::reference也是同样的隐形代理类&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Effective Modern C++" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Effective-Modern-C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>auto、decltype与模板类型推断的异同</title>
    <link href="http://yoursite.com/articles/auto-decltype%E4%B8%8E%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E7%9A%84%E5%BC%82%E5%90%8C.html"/>
    <id>http://yoursite.com/articles/auto-decltype%E4%B8%8E%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E7%9A%84%E5%BC%82%E5%90%8C.html</id>
    <published>2019-12-17T13:22:32.000Z</published>
    <updated>2019-12-18T04:10:15.239Z</updated>
    
    <content type="html"><![CDATA[<p>auto和模板类型推断在一般情况下等价（除非遇到列表实参的情况），这两种推断方式同样会忽略掉初始化表达式的引用性，同样会在形参不是引用的情况下将数组名和函数名退化为指针，而在形参是引用的情况将类型推断为数组类型（包括数组大小）和函数类型。</p><a id="more"></a><p>但是在实参为列表的时候，auto会假定用大括号括起来的初始化表达式代表一个initializer_list，而模板类型推断则不会。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">auto x&#x3D;&#123;1,2,3&#125;;&#x2F;&#x2F;推断类型为initializer_list&lt;int&gt;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void f(T param);</span><br><span class="line"></span><br><span class="line">f(&#123;1,2,3&#125;);&#x2F;&#x2F;这个是错误的，因为模板类型推断无法推断出一个initialist_list</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;正确做法</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void f(std::initializer_list&lt;T&gt; initList);</span><br><span class="line"></span><br><span class="line">f(&#123;1,2,3&#125;);&#x2F;&#x2F;正确，推断出T为int</span><br></pre></td></tr></table></figure><p>但是！在函数返回值或者lambda表达式的形参中使用auto，表示的就是要使用模板类型推断！此时不能推断出一个initialist_list！</p><p>那么decltype的类型推断方式有什么不同呢？<br>decltype的类型推断其实就是一个“火眼金睛”，它能够还原实参本来的类型，即数组就推断出数组类型，函数就推断出函数类型。除非另外用括号将一个变量括起来，此时会推断出引用类型。</p><p>在C++ 11中，只允许堆单表达式的lambda的返回值进行类型推断，而在C++ 14中，这个范围扩张到了一切lambda和一切函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;C++ 11中</span><br><span class="line">template&lt;typename Container,typename Index&gt;</span><br><span class="line">auto func(Container &amp;c,Index i)-&gt;decltype(c[i])</span><br><span class="line">&#123;</span><br><span class="line">return c[i];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;C++ 14 中</span><br><span class="line">template&lt;typename Container,typename Index&gt;</span><br><span class="line">auto func(Container &amp;c,Index i)</span><br><span class="line">&#123;&#x2F;&#x2F;这是不正确的，因为引用性会被忽略</span><br><span class="line">return c[i];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;保存引用性</span><br><span class="line">template&lt;typename Container,typename Index&gt;</span><br><span class="line">delctype(auto) func(Container &amp;c,Index i)</span><br><span class="line">&#123;</span><br><span class="line">return c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>decltype(auto)指auto指定了要实施类型推断的类型，然后采用了decltype的规则，即可以保存引用性</p><p>考虑到传进来的容器可能是一个右值容器，我们需要保存实参的类型再进行类型推断，否则就会出现在对一个右值容器进行赋值的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename Container,typename Index&gt;</span><br><span class="line">delctype(auto) func(Container &amp;&amp;c,Index i)</span><br><span class="line">&#123;</span><br><span class="line">return std::forward&lt;Container&gt;(c)[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;auto和模板类型推断在一般情况下等价（除非遇到列表实参的情况），这两种推断方式同样会忽略掉初始化表达式的引用性，同样会在形参不是引用的情况下将数组名和函数名退化为指针，而在形参是引用的情况将类型推断为数组类型（包括数组大小）和函数类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Effective Modern C++" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Effective-Modern-C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>对string调用swap迭代器失效的原因</title>
    <link href="http://yoursite.com/articles/%E5%AF%B9string%E8%B0%83%E7%94%A8swap%E4%BC%9A%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0.html"/>
    <id>http://yoursite.com/articles/%E5%AF%B9string%E8%B0%83%E7%94%A8swap%E4%BC%9A%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0.html</id>
    <published>2019-12-17T07:15:57.000Z</published>
    <updated>2019-12-17T07:47:17.020Z</updated>
    
    <content type="html"><![CDATA[<p>在《C++ Primer》中提到，除string外的容器在swap后指向容器的迭代器、引用和指针都不会失效，但却没有说明string调用swap后会失效的原因。</p><a id="more"></a><p>在查阅资料后发现，C++中存在对短字符串的优化，即Short String Optimization（SSO)。</p><p>因为在默认情况下，C++的string都是存储在堆中，导致访问string需要经过一次寻址过程，速度较慢，并且这种实现的空间局部性不好，对cache的利用较低。而且很多string的字符串长度很小，这个时候，就可以把字符串存储到栈上，从而不需要进行内存分配，优化创建速度，并且访问栈上数据的局部性很好，速度比较快。</p><p>即C++会自动把较短的字符串放到对象内部，较长的字符串放到动态内存。假如string 用 SSO 实现，而待交换的两个对象中的字符串恰好一长一短，则原先指向短字符串中的迭代器会全部失效。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在《C++ Primer》中提到，除string外的容器在swap后指向容器的迭代器、引用和指针都不会失效，但却没有说明string调用swap后会失效的原因。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C++ Primer" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C-Primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>实现空间配置器（allocator)</title>
    <link href="http://yoursite.com/articles/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8.html"/>
    <id>http://yoursite.com/articles/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE%E5%99%A8.html</id>
    <published>2019-12-16T13:49:27.000Z</published>
    <updated>2019-12-16T14:02:31.044Z</updated>
    
    <content type="html"><![CDATA[<p>allocator 是一个空间配置器而不是内存配置器，因为空间也可以是磁盘或其他辅助存储介质，我们可以写一个allocator直接向磁盘取空间</p><a id="more"></a><h2 id="设计一个简单的空间配置器"><a href="#设计一个简单的空间配置器" class="headerlink" title="设计一个简单的空间配置器"></a>设计一个简单的空间配置器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _CZPALLOC_</span><br><span class="line">#define _CZPALLOC_</span><br><span class="line"></span><br><span class="line">#include &lt;new&gt;;&#x2F;&#x2F;使用定位new</span><br><span class="line">#include &lt;cstddef&gt;&#x2F;&#x2F;使用ptrdiff_t,size_t</span><br><span class="line">#include &lt;cstdlib&gt;&#x2F;&#x2F;使用exit()</span><br><span class="line">#include &lt;climits&gt;&#x2F;&#x2F;使用UINT_MAX,指未分配的可用空间</span><br><span class="line">#include &lt;iostream&gt;&#x2F;&#x2F;使用cerr</span><br><span class="line"></span><br><span class="line">namespace CZP &#123;</span><br><span class="line">&#x2F;&#x2F;分配空间</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">inline T _allocate(ptrdiff_t size, T*) &#123;&#x2F;&#x2F;size表示分配对应类型内存的个数</span><br><span class="line">set_new_handler(0);&#x2F;&#x2F;设置new失败时调用的处理函数，参数0表示处理函数将被设置为默认值，即会执行抛出bad_alloc异常</span><br><span class="line">T* tmp &#x3D; (T*)(::operator new((size_t)(size * sizeof(T))));</span><br><span class="line">if（!tmp)&#123;</span><br><span class="line">cerr &lt;&lt; &quot;out of memory&quot; &lt;&lt; endl;</span><br><span class="line">exit(1);&#x2F;&#x2F;程序异常退出，参数为0时表示程序正常退出</span><br><span class="line">&#125;</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;释放空间</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">inline void _deallocate(T* buffer) &#123;</span><br><span class="line">::operator delete(buffer);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;构造对象</span><br><span class="line">template &lt;typename T1,typename T2&gt;</span><br><span class="line">inline void _construct(T1* p, const T2&amp; value) &#123;</span><br><span class="line">new(p)T1(value);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;销毁对象</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">inline void _destroy(T* ptr) &#123;</span><br><span class="line">ptr-&gt;~T();</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">class allocator &#123;</span><br><span class="line">public:</span><br><span class="line">&#x2F;&#x2F;各个类型别名的声明</span><br><span class="line">typedef T value_type;</span><br><span class="line">typedef T* pointer;</span><br><span class="line">typedef const T* const_pointer;</span><br><span class="line">typedef T&amp; reference;</span><br><span class="line">typedef const T&amp; const_reference;</span><br><span class="line">typedef size_t size_type;</span><br><span class="line">typedef ptrdiff_t difference_type;</span><br><span class="line">&#x2F;&#x2F;一个嵌套的类模板</span><br><span class="line">template &lt;typename U&gt;</span><br><span class="line">struct rebind &#123;</span><br><span class="line">typedef allocator&lt;U&gt; other;</span><br><span class="line">&#125;;</span><br><span class="line">pointer allocate(size_type n, const void* hint &#x3D; 0) &#123;&#x2F;&#x2F;第二个参数是个提示，可能会利用来增进区域性（locality），可完全忽略</span><br><span class="line">return _allocate((difference_type)n, (pointer)0);</span><br><span class="line">&#125;</span><br><span class="line">void deallocate(pointer p, size_type n) &#123;</span><br><span class="line">_deallocate(p);</span><br><span class="line">&#125;</span><br><span class="line">void construct(pointer p, const T&amp; value) &#123;</span><br><span class="line">_construct(p, value);</span><br><span class="line">&#125;</span><br><span class="line">void destroy(pointer p) &#123;</span><br><span class="line">_destroy(p);</span><br><span class="line">&#125;</span><br><span class="line">pointer address(reference X) &#123;</span><br><span class="line">return (pointer)&amp;X;</span><br><span class="line">&#125;</span><br><span class="line">const_pointer const_address(const_reference X) &#123;</span><br><span class="line">return (const_pointer)&amp;X;</span><br><span class="line">&#125;</span><br><span class="line">size_type max_size()const &#123;</span><br><span class="line">return size_type(UNIT_MAX &#x2F; sizeof(T));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以用这个空间配置器作为vector的第二个参数来指定使用它分配空间</span><br><span class="line">#endif &#x2F;&#x2F; !_CZPALLOC_</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;allocator 是一个空间配置器而不是内存配置器，因为空间也可以是磁盘或其他辅助存储介质，我们可以写一个allocator直接向磁盘取空间&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="STL源码剖析" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/STL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++中类的对象模型探讨</title>
    <link href="http://yoursite.com/articles/C-%E4%B8%AD%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E6%8E%A2%E8%AE%A8.html"/>
    <id>http://yoursite.com/articles/C-%E4%B8%AD%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E6%8E%A2%E8%AE%A8.html</id>
    <published>2019-12-16T10:14:05.000Z</published>
    <updated>2019-12-16T14:19:23.293Z</updated>
    
    <content type="html"><![CDATA[<p>在C++中，类可以发生多继承，那么派生类中就会出现多份数据，进而导致访问出现二义性的情况。此时我们可以通过访问时添加作用域来解决二义性，但却无法避免同时保存多份数据浪费内存的情况。</p><a id="more"></a><p>这个时候，就可以使用虚继承来使派生类中只有一份数据，避免浪费内存，那么这样的虚继承是怎么实现的呢？</p><p>通过实践知道，对于一个空类，它占用的内存是1字节，而对于只有一个虚函数的类，它占用的内存却是4个字节。而这4个字节，就是一个vptr，即一个指向虚函数表的指针。</p><p>虚函数表中会保存类对象的相关类型（动态类型）以及相关的虚函数。派生类若是重新实现了继承下来的虚函数，那么这个时候虚函数表在运行时就会绑定到这个派生类的类型，其中的虚函数也是对应的相关类型的函数，而此时的vptr就是指向这个虚函数表中对应的函数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在C++中，类可以发生多继承，那么派生类中就会出现多份数据，进而导致访问出现二义性的情况。此时我们可以通过访问时添加作用域来解决二义性，但却无法避免同时保存多份数据浪费内存的情况。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="深度探索C++对象模型" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++移动构造函数为什么需要noexcept</title>
    <link href="http://yoursite.com/articles/C-%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81noexcept.html"/>
    <id>http://yoursite.com/articles/C-%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81noexcept.html</id>
    <published>2019-12-16T06:15:26.000Z</published>
    <updated>2019-12-16T14:27:32.072Z</updated>
    
    <content type="html"><![CDATA[<p>在C++中，类的移动操作通常“窃取”资源而不分配资源，所以通常不会抛出任何异常。在编写一个不抛出异常的操作时，我们应该实现通知标准库以避免一些额外的工作。此时我们要在移动操作的声明和定义中添加noexcept来告知标准库。</p><a id="more"></a><p>虽然移动操作通常不会抛出异常，但是抛出异常也是允许的。那么当移动操作抛出异常时会发生什么呢？</p><p>举例来说，标准库要求容器能对异常发生时其自身的行为提供保障，如vector保证如果调用push_back然后分配内存的过程发生异常的话，vector自身不会发生改变。</p><p>而在vector重新分配内存的过程中，如果使用的是拷贝构造函数，即使异常发生了，那么只需要销毁新构造的对象然后释放刚分配的内存即可，vector本身自然不会发生任何改变。</p><p>如果使用的是移动构造函数，而这个移动构造函数发生了异常，那么对象可能移动了一部分，而此时明显无法满足vector本身不发生任何改变的要求。也就是说，我们必须把移动构造函数声明为noexcept来告知标准库这个移动操作可以安全使用，不然就必须使用拷贝构造函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在C++中，类的移动操作通常“窃取”资源而不分配资源，所以通常不会抛出任何异常。在编写一个不抛出异常的操作时，我们应该实现通知标准库以避免一些额外的工作。此时我们要在移动操作的声明和定义中添加noexcept来告知标准库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C++ Primer" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C-Primer/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>QT基础05</title>
    <link href="http://yoursite.com/articles/QT05.html"/>
    <id>http://yoursite.com/articles/QT05.html</id>
    <published>2019-12-11T13:11:30.000Z</published>
    <updated>2019-12-16T14:18:26.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动Widget"><a href="#移动Widget" class="headerlink" title="移动Widget"></a>移动Widget</h2><p>建立一个Widget然后右键提升为，填写将要从其他地方移动过来的类名</p><a id="more"></a><h2 id="组装组件同时改变"><a href="#组装组件同时改变" class="headerlink" title="组装组件同时改变"></a>组装组件同时改变</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;QSpinBox移动，QSlider跟着移动</span><br><span class="line">void (QSpinBox::*spSignal)(int)&#x3D;&amp;QSpinBox::valueChanged;</span><br><span class="line">connect(ui-&gt;spinBox,spSignal,ui-&gt;horizontalSlider,&amp;QSlider::setValue);</span><br><span class="line">&#x2F;&#x2F;QSlider移动，QSpinBox跟着移动</span><br><span class="line">connect(ui-&gt;horizontalSlider,&amp;QSlider::valueChanged,ui-&gt;spinBox,&amp;QSpinBox::setValue);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;移动Widget&quot;&gt;&lt;a href=&quot;#移动Widget&quot; class=&quot;headerlink&quot; title=&quot;移动Widget&quot;&gt;&lt;/a&gt;移动Widget&lt;/h2&gt;&lt;p&gt;建立一个Widget然后右键提升为，填写将要从其他地方移动过来的类名&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="QT使用" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/QT%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="QT" scheme="http://yoursite.com/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>计数排序</title>
    <link href="http://yoursite.com/articles/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.html"/>
    <id>http://yoursite.com/articles/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.html</id>
    <published>2019-12-11T12:14:46.000Z</published>
    <updated>2019-12-11T12:37:13.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>对于每一个元素，确定小于它的元素个数，然后将该元素放置在对应的位置上。</p><a id="more"></a><h2 id="代码实现（C-）"><a href="#代码实现（C-）" class="headerlink" title="代码实现（C++）"></a>代码实现（C++）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void CountSort(vector&lt;int&gt;&amp; arr, int maxVal) &#123;</span><br><span class="line">int len &#x3D; arr.size();</span><br><span class="line">if (len &lt; 1)</span><br><span class="line">return;</span><br><span class="line">vector&lt;int&gt; count(maxVal + 1, 0);</span><br><span class="line">vector&lt;int&gt; tmp(arr);</span><br><span class="line">for (auto x : arr)</span><br><span class="line">count[x]++;</span><br><span class="line">for (int i &#x3D; 1; i &lt;&#x3D; maxVal; ++i)</span><br><span class="line">count[i] +&#x3D; count[i - 1];</span><br><span class="line">for (int i &#x3D; len - 1; i &gt;&#x3D; 0; --i) &#123;</span><br><span class="line">arr[count[tmp[i]] - 1] &#x3D; tmp[i];</span><br><span class="line">count[tmp[i]]--;&#x2F;&#x2F;注意这里要减1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>优势在于在对一定范围内的整数排序时，它的复杂度为Ο(n+k)（其中k是整数的范围），<br>快于任何比较排序算法。</p><p>而且当O(k)&gt;O(nlogn)的时候其效率反而不如基于比较的排序（<br>基于比较的排序的时间复杂度在理论上的下限是O(nlogn), 如归并排序，堆排序）</p><p>稳定性：稳定<br>注意：计数排序算法不是一个基于比较的排序算法，从而它的计算时间下界不再是O(nlogn)。<br>计数排序算法之所以能取得线性计算时间的上界是因为对元素的取值范围作了一定限制，<br>即k=O(n)。如果k=n2,n3,..，就得不到线性时间的上界。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;对于每一个元素，确定小于它的元素个数，然后将该元素放置在对应的位置上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法导论" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="排序算法" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>编译原理01引论2</title>
    <link href="http://yoursite.com/articles/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601%E5%BC%95%E8%AE%BA2.html"/>
    <id>http://yoursite.com/articles/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601%E5%BC%95%E8%AE%BA2.html</id>
    <published>2019-12-11T03:25:59.000Z</published>
    <updated>2019-12-11T12:20:31.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译器的结构"><a href="#编译器的结构" class="headerlink" title="编译器的结构"></a>编译器的结构</h2><p>分析部分+综合部分<br>（即前端+优化+后端）<br>分析部分：分解源程序，按语法结构创建中间表示，并收集源程序的信息存放在称为符号表的数据结构中。最后将符号表和中间表示形式一起传送给综合部分<br>综合部分：利用符号表和中间表示形式来构造用户想要的目标程序</p><a id="more"></a><h3 id="词法分析-扫描"><a href="#词法分析-扫描" class="headerlink" title="词法分析/扫描"></a>词法分析/扫描</h3><p>词法分析器读入组成源程序的字符流，组织成词素的序列，最后将每个词素以词法单元的形式输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">position &#x3D; initial + rate * 60;</span><br><span class="line">&lt;id,1&gt;&lt;&#x3D;&gt;&lt;id,2&gt;&lt;+&gt;&lt;id,3&gt;&lt;*&gt;&lt;60&gt;</span><br></pre></td></tr></table></figure><h3 id="语法分析-解析"><a href="#语法分析-解析" class="headerlink" title="语法分析/解析"></a>语法分析/解析</h3><p>语法分析器使用词法单元来创建树形的中间表示，最后将语法树输出</p><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>语义分析器使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致。同时收集类型信息，并存放在语法树和符号表中，以便在随后的中间代码生成过程中使用</p><p>语义分析的一个重要部分：类型检查，即检查每个运算符是否具有匹配的运算分量（可能允许自动类型转换）</p><h3 id="中间代码"><a href="#中间代码" class="headerlink" title="中间代码"></a>中间代码</h3><p>特点：易于生成，且能够被轻松翻译为目标机器上的语言<br>三地址代码：由类似于汇编语言的指令组成，且每个指令（最多）具有三个运算分量，而每个运算分量就像一个寄存器<br>每个三地址赋值指令的右部最多只有一个运算符</p><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p>将源程序的中间表示形式映射到目标语言，如果目标语言是机器语言，则必须为程序使用的每个变量选择寄存器或内存位置（要合理分配寄存器以存放变量的值）<br>数字前面加井号表示将该数字当作立即数处理</p><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><p>为每个变量创建一个记录条目，记录的字段就是名字的各个属性。<br><em>符号表可以让编译器迅速查找到每个名字的记录，并向记录中快速存放和获取记录中的数据</em></p><h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><p>又称为扩建的语言，或者动态语言，是一种编程语言。<br>脚本语言是为了缩短传统的编写-编译-链接-运行过程而创建的计算机编程语言。用来控制软件应用程序，脚本通常以文本（如ASCII)保存，只在被调用时进行解释或编译。</p><p>一个脚本通常是解释执行而非编译。脚本语言通常都有简单、易学、易用的特性，目的就是希望能让程序员快速完成程序的编写工作。而宏语言则可视为脚本语言的分支，两者也有实质上的相同之处。</p><h2 id="并行性"><a href="#并行性" class="headerlink" title="并行性"></a>并行性</h2><p>指令层次：多个运算可以同时执行<br>处理器层次：同一应用的多个不同线程在不同的处理器上运行</p><p>这种并行性可以对程序员隐藏起来，硬件动态地检测顺序指令流之间的依赖关系，并且在可能的时候并法地发出指令。<br>硬件调度器：改变指令地顺序以提高程序的并行性</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译器的结构&quot;&gt;&lt;a href=&quot;#编译器的结构&quot; class=&quot;headerlink&quot; title=&quot;编译器的结构&quot;&gt;&lt;/a&gt;编译器的结构&lt;/h2&gt;&lt;p&gt;分析部分+综合部分&lt;br&gt;（即前端+优化+后端）&lt;br&gt;分析部分：分解源程序，按语法结构创建中间表示，并收集源程序的信息存放在称为符号表的数据结构中。最后将符号表和中间表示形式一起传送给综合部分&lt;br&gt;综合部分：利用符号表和中间表示形式来构造用户想要的目标程序&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="编译" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>编译原理01引论1</title>
    <link href="http://yoursite.com/articles/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601%E5%BC%95%E8%AE%BA1.html"/>
    <id>http://yoursite.com/articles/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601%E5%BC%95%E8%AE%BA1.html</id>
    <published>2019-12-10T13:56:50.000Z</published>
    <updated>2019-12-10T15:11:57.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>将高级语言翻译为低级语言的程序<br>工作流程：源代码-&gt;预处理器-&gt;编译器-&gt;目标代码-&gt;链接器-&gt;可执行程序</p><a id="more"></a><p>源程序可能被分割称为多个模块，并存放于独立的文件，此时由预处理器来将源程序聚合在一起<br>（预处理器是在真正的编译开始之前由编译器调用的独立程序。预处理器可以删除注释、包含其他文件以及执行宏替代。）</p><p><em>宏是一种抽象，它根据一系列预定义的规则替换一定的文本模式。解释器或编译器在遇到宏时会自动进行这一模式替换。对于编译语言，宏展开在编译时发生，进行宏展开的工具常被称为宏展开器。</em></p><p>汇编语言比较容易输出和调试，所以编译器（可能）产生一个汇编语言程序作为其输出，这个程序由汇编器程序进行处理，并生成<strong>可重定位的机器代码</strong></p><p>因为大型程序经常分为多个部分进行编译，所以可重定位的机器代码有必要和其他可重定位的目标文件以及库文件连接到一起，从而形成真正在机器上运行的代码</p><p>一个文件中的代码可能指向另一个文件中的位置，而链接器能够解决外部内存地址的问题</p><p>最后加载器把所有的可执行目标文件放到内存中执行</p><p>对于C#、VB等高级语言而言，此时编译器完成的功能是把源码编译成通用中间语言（MSIL/CIL）的字节码（ByteCode）。最后运行的时候通过通用语言运行库（虚拟机）的转换，编程最终可以被CPU直接计算的机器码（NativeCode）</p><p>字节码是可以发送给任何平台并且能在那个平台上运行的独立于平台的代码。</p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p>又称为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。解释器的程序运行速度比较缓慢，但错误诊断效果通常比编译器好</p><h3 id="关于Java"><a href="#关于Java" class="headerlink" title="关于Java"></a>关于Java</h3><p>大多数用任何语言写的程序在每个电脑平台上都必须重编译，甚至有时需要重写。而Java最大的优点之一就是你只需要写和编译一次程序。在任何平台上，Java都会将编译好的字节码解释成能被特定的处理器所理解的指令(即一次编译，到处运行)。Java虚拟机一次只能处理一条字节码指令。</p><h3 id="Java语言处理器"><a href="#Java语言处理器" class="headerlink" title="Java语言处理器"></a>Java语言处理器</h3><p>工作流程：源程序-&gt;（编译）-&gt;字节码-&gt;（虚拟机）-&gt;解释执行<br>即时编译器（JIT compiler）：随虚拟机一起供给的，并可选使用。它把字节码编译成可立即执行的指定平台的可执行代码。选择JIT编译器选项通常会使程序运行地更快，尤其是当某个可执行的方法被重复使用时。<br>（一旦代码被JIT编译器（重）编译后，它在电脑上通常就会运行地更快。）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译器&quot;&gt;&lt;a href=&quot;#编译器&quot; class=&quot;headerlink&quot; title=&quot;编译器&quot;&gt;&lt;/a&gt;编译器&lt;/h2&gt;&lt;p&gt;将高级语言翻译为低级语言的程序&lt;br&gt;工作流程：源代码-&amp;gt;预处理器-&amp;gt;编译器-&amp;gt;目标代码-&amp;gt;链接器-&amp;gt;可执行程序&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编译原理" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="编译" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>QT基础04</title>
    <link href="http://yoursite.com/articles/QT04.html"/>
    <id>http://yoursite.com/articles/QT04.html</id>
    <published>2019-12-10T10:07:20.000Z</published>
    <updated>2019-12-16T14:17:51.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ListWidget"><a href="#ListWidget" class="headerlink" title="ListWidget"></a>ListWidget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用ListWidget</span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">    , ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">    QListWidgetItem *item&#x3D;new QListWidgetItem(&quot;锄禾日当午&quot;);</span><br><span class="line">    ui-&gt;ListWidget-&gt;addItem(item);</span><br><span class="line">    item-&gt;setTextAlignment(Qt::AlignHCenter);</span><br><span class="line">    </span><br><span class="line">    QStringList list;</span><br><span class="line">    list&lt;&lt;&quot;锄禾日当午&quot;&lt;&lt;&quot;汗滴禾下土&quot;;</span><br><span class="line">    ui-&gt;ListWidget-&gt;addItems(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="treeWidget"><a href="#treeWidget" class="headerlink" title="treeWidget"></a>treeWidget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用treeWidget</span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">    , ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">    &#x2F;&#x2F;设置水平头</span><br><span class="line">    ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt;&quot;英雄&quot;&lt;&lt;&quot;英雄介绍&quot;);</span><br><span class="line">    </span><br><span class="line">    QTreeWidgetItem *liItem&#x3D;new QTreeWidgetItem(QStringList()&lt;&lt;&quot;力量&quot;);</span><br><span class="line">    QTreeWidgetItem *minItem&#x3D;new QTreeWidgetItem(QStringList()&lt;&lt;&quot;敏捷&quot;);</span><br><span class="line">    QTreeWidgetItem *zhiItem&#x3D;new QTreeWidgetItem(QStringList()&lt;&lt;&quot;智力&quot;);</span><br><span class="line">    &#x2F;&#x2F;追加子节点</span><br><span class="line">    QStringList heroL1;</span><br><span class="line">    heroL1&lt;&lt;&quot;第一个英雄&quot;&lt;&lt;&quot;他的属性-----&quot;;</span><br><span class="line">    QTreeWidgetItem *l1&#x3D;new QTreeWidgetItem(heroL1);</span><br><span class="line">    liItem-&gt;addChild(l1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tableWidget"><a href="#tableWidget" class="headerlink" title="tableWidget"></a>tableWidget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用tableWidget</span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">    , ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">    ui-&gt;tableWidget-&gt;setColumnCount(3);</span><br><span class="line">    ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;&quot;姓名&quot;&lt;&lt;&quot;性别&quot;&lt;&lt;&quot;年龄&quot;);</span><br><span class="line">    ui-&gt;tableWidget-&gt;setRowCount(5);</span><br><span class="line">    &#x2F;&#x2F;ui-&gt;tableWidget-&gt;setItem(0,0,new QTableWidgetItem(&quot;亚瑟&quot;));</span><br><span class="line">    </span><br><span class="line">    QStringList *nameList;</span><br><span class="line">    nameList&lt;&lt;&quot;张三&quot;&lt;&lt;&quot;王五&quot;&lt;&lt;&quot;李四&quot;&lt;&lt;&quot;关羽&quot;&lt;&lt;&quot;张飞&quot;;</span><br><span class="line">    QList&lt;QString&gt; sexList;</span><br><span class="line">    sexList&lt;&lt;&quot;男&quot;&lt;&lt;&quot;男&quot;&lt;&lt;&quot;女&quot;&lt;&lt;&quot;女&quot;&lt;&lt;&quot;女&quot;;</span><br><span class="line">    for(int i&#x3D;0;i&lt;5;i++)&#123;</span><br><span class="line">        int col&#x3D;0;</span><br><span class="line">        ui-&gt;tableWidget-&gt;setItem(i,col++,new QTableWidgetItem(nameList[i]));</span><br><span class="line">        ui-&gt;tableWidget-&gt;setItem(i,col++,new QTableWidgetItem(sexList[i]));</span><br><span class="line">        ui-&gt;tableWidget-&gt;setItem(i,col++,new QTableWidgetItem(QString::number(i+18)));</span><br><span class="line">        &#x2F;&#x2F;这里将int转为QString</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用QLabel"><a href="#使用QLabel" class="headerlink" title="使用QLabel"></a>使用QLabel</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">    , ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">    &#x2F;&#x2F;利用QLabel显示图片和播放动图</span><br><span class="line">    ui-&gt;label1-&gt;setPixmap(QPixmap(&quot;文件的相对路径&quot;));</span><br><span class="line">    QMovie *movie&#x3D;new QMovie(&quot;文件的相对路径&quot;);</span><br><span class="line">    ui-&gt;label2-&gt;setMovie(movie);</span><br><span class="line">    movie-&gt;start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ListWidget&quot;&gt;&lt;a href=&quot;#ListWidget&quot; class=&quot;headerlink&quot; title=&quot;ListWidget&quot;&gt;&lt;/a&gt;ListWidget&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F;使用ListWidget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MainWindow::MainWindow(QWidget *parent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : QMainWindow(parent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    , ui(new Ui::MainWindow)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ui-&amp;gt;setupUi(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QListWidgetItem *item&amp;#x3D;new QListWidgetItem(&amp;quot;锄禾日当午&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ui-&amp;gt;ListWidget-&amp;gt;addItem(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    item-&amp;gt;setTextAlignment(Qt::AlignHCenter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QStringList list;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list&amp;lt;&amp;lt;&amp;quot;锄禾日当午&amp;quot;&amp;lt;&amp;lt;&amp;quot;汗滴禾下土&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ui-&amp;gt;ListWidget-&amp;gt;addItems(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="QT使用" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/QT%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="QT" scheme="http://yoursite.com/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>QT基础03</title>
    <link href="http://yoursite.com/articles/QT03.html"/>
    <id>http://yoursite.com/articles/QT03.html</id>
    <published>2019-12-10T03:15:34.000Z</published>
    <updated>2019-12-16T14:17:41.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h2><p>一个为用户提供主窗口程序的类， 包含一个菜单栏，多个工具栏，多个锚接部件，一个状态栏，及一个中心部件，是许多应用程序的基础</p><a id="more"></a><h2 id="窗口设置"><a href="#窗口设置" class="headerlink" title="窗口设置"></a>窗口设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QMenuBar&gt;</span><br><span class="line">#include &lt;QToolBar&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">#include &lt;QPushButton&gt;</span><br><span class="line">#include &lt;QStatusBar&gt;</span><br><span class="line">#include &lt;QLabel&gt;</span><br><span class="line">#include &lt;QDockWidget&gt;</span><br><span class="line">#include &lt;QTextEdit&gt;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    resize(600,400);</span><br><span class="line">    &#x2F;&#x2F;菜单栏</span><br><span class="line">    QMenuBar *bar&#x3D;menuBar();&#x2F;&#x2F;默认new放到this下，不用管理释放</span><br><span class="line">    setMenuBar(bar);</span><br><span class="line">    QMenu *fileMenu&#x3D;bar-&gt;addMenu(&quot;文件&quot;);</span><br><span class="line">    QMenu *editMenu&#x3D;bar-&gt;addMenu(&quot;编辑&quot;);</span><br><span class="line">    QAction *newAction&#x3D;fileMenu-&gt;addAction(&quot;新建&quot;);</span><br><span class="line">    fileMenu-&gt;addSeparator();</span><br><span class="line">    QAction *openAction&#x3D;fileMenu-&gt;addAction(&quot;打开&quot;);</span><br><span class="line">    &#x2F;&#x2F;工具栏</span><br><span class="line">    QToolBar *toolBar&#x3D;new QToolBar(this);</span><br><span class="line">    addToolBar(Qt::LeftToolBarArea,toolBar);</span><br><span class="line">    toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea|Qt::RightToolBarArea);</span><br><span class="line">    toolBar-&gt;setFloatable(false);</span><br><span class="line">    toolBar-&gt;setMovable(false);</span><br><span class="line"></span><br><span class="line">    toolBar-&gt;addAction(newAction);</span><br><span class="line">    toolBar-&gt;addSeparator();</span><br><span class="line">    toolBar-&gt;addAction(openAction);</span><br><span class="line"></span><br><span class="line">    QPushButton *btn&#x3D;new QPushButton(&quot;aa&quot;,this);</span><br><span class="line">    toolBar-&gt;addWidget(btn);</span><br><span class="line">    &#x2F;&#x2F;状态栏</span><br><span class="line">    QStatusBar *stBar&#x3D;statusBar();</span><br><span class="line">    setStatusBar(stBar);</span><br><span class="line">    QLabel *label&#x3D;new QLabel(&quot;提示信息&quot;,this);</span><br><span class="line">    stBar-&gt;addWidget(label);</span><br><span class="line">    QLabel *label2&#x3D;new QLabel(&quot;右侧提示信息&quot;,this);</span><br><span class="line">    stBar-&gt;addPermanentWidget(label2);</span><br><span class="line">    &#x2F;&#x2F;锚接部件（浮动窗口）</span><br><span class="line">    QDockWidget *dockWidget&#x3D;new QDockWidget(&quot;浮动&quot;,this);</span><br><span class="line">    addDockWidget(Qt::BottomDockWidgetArea,dockWidget);</span><br><span class="line">    &#x2F;&#x2F;设置中心部件</span><br><span class="line">    QTextEdit *edit&#x3D;new QTextEdit(this);</span><br><span class="line">    setCentralWidget(edit);</span><br><span class="line">    &#x2F;&#x2F;只能有一个部件的就用set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资源文件添加"><a href="#资源文件添加" class="headerlink" title="资源文件添加"></a>资源文件添加</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &quot;ui_mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">    , ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">    &#x2F;&#x2F;ui-&gt;actionNew-&gt;setIcon(QIcon(&quot;------&quot;));&#x2F;&#x2F;图片的绝对路径</span><br><span class="line">    &#x2F;&#x2F;添加资源文件-&gt;源文件右键在Explorer中显示，将资源文件放入</span><br><span class="line">    &#x2F;&#x2F;右键总文件添加新文件-&gt;QT-&gt;QT Rresource file</span><br><span class="line">    &#x2F;&#x2F;右键res.qrc然后open in editor</span><br><span class="line">    &#x2F;&#x2F;使用添加Qt资源冒号加前缀加文件名</span><br><span class="line">    &#x2F;&#x2F;ui-&gt;actionNew-&gt;setIcon(QIcon(&quot;----&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">    , ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">    connect(ui-&gt;actionNew,&amp;QAction::triggered,[&#x3D;]()&#123;</span><br><span class="line">        &#x2F;&#x2F;模态对话框，不可以对其他窗口进行操作</span><br><span class="line">&#x2F;&#x2F;        QDialog dlg(this);</span><br><span class="line">&#x2F;&#x2F;        dlg.resize(200,100);</span><br><span class="line">&#x2F;&#x2F;        dlg.exec();   &#x2F;&#x2F;代码阻塞带当前行</span><br><span class="line">        &#x2F;&#x2F;非模态对话框，可以对其他窗口进行操作</span><br><span class="line">&#x2F;&#x2F;        QDialog dlg2(this);</span><br><span class="line">&#x2F;&#x2F;        dlg2.show();&#x2F;&#x2F;窗口会一闪而过，因为show完马上就被释放了</span><br><span class="line">        QDialog *dlg2&#x3D;new QDialog(this);</span><br><span class="line">        dlg2-&gt;show();</span><br><span class="line">        dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);&#x2F;&#x2F;55号属性，对话框关即释放内存，防止内存泄漏</span><br><span class="line">        &#x2F;&#x2F;消息对话框</span><br><span class="line">&#x2F;&#x2F;        QMessageBox::critical(this,&quot;critical&quot;,&quot;错误&quot;);&#x2F;&#x2F;这是静态成员函数</span><br><span class="line">&#x2F;&#x2F;        QMessageBox::information(this,&quot;info&quot;,&quot;信息&quot;);   &#x2F;&#x2F;返回的是standardButton类型</span><br><span class="line">        if(QMessageBox::Save&#x3D;&#x3D;QMessageBox::question(this,&quot;ques&quot;,&quot;提问&quot;,QMessageBox::Save|QMessageBox::Cancel,QMessageBox::Cancel))&#123;</span><br><span class="line">            qDebug()&lt;&lt;&quot;选择的是保存&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            qDebug()&lt;&lt;&quot;选择的是取消&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;第四个参数是按键类型，最后一个参数的默认关联回车按键</span><br><span class="line">        QMessageBox::warning(this,&quot;warning&quot;,&quot;警告&quot;);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;颜色对话框</span><br><span class="line">        QColor color&#x3D;QColorDialog::getColor(QColor(255,0,0));</span><br><span class="line">        qDebug()&lt;&lt;&quot;r&#x3D;&quot;&lt;&lt;color.red()&lt;&lt;&quot;g&#x3D;&quot;&lt;&lt;color.green()&lt;&lt;&quot;b&#x3D;&quot;&lt;&lt;color.blue();</span><br><span class="line">        &#x2F;&#x2F;文件对话框,最后一个参数指出现的文件格式,返回值是路径</span><br><span class="line">        QString str&#x3D;QFileDialog::getOpenFileName(this,&quot;打开文件&quot;,&quot;------&quot;,&quot;(*.txt)&quot;);</span><br><span class="line">        qDebug()&lt;&lt;str;</span><br><span class="line">        &#x2F;&#x2F;字体对话框</span><br><span class="line">        bool flag;</span><br><span class="line">        QFont font&#x3D;QFontDialog::getFont(&amp;flag,QFont(&quot;华文彩云&quot;,36));</span><br><span class="line">        qDebug()&lt;&lt;&quot;字体：&quot;&lt;&lt;font.family().toUtf8().data()&lt;&lt;&quot;字号:&quot;&lt;&lt;font.pointSize()&lt;&lt;&quot;是否加粗&quot;&lt;&lt;font.bold()&lt;&lt;&quot;是否斜体&quot;&lt;&lt;font.italic();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;QMainWindow&quot;&gt;&lt;a href=&quot;#QMainWindow&quot; class=&quot;headerlink&quot; title=&quot;QMainWindow&quot;&gt;&lt;/a&gt;QMainWindow&lt;/h2&gt;&lt;p&gt;一个为用户提供主窗口程序的类， 包含一个菜单栏，多个工具栏，多个锚接部件，一个状态栏，及一个中心部件，是许多应用程序的基础&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="QT使用" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/QT%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="QT" scheme="http://yoursite.com/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://yoursite.com/articles/%E7%BA%A2%E9%BB%91%E6%A0%91.html"/>
    <id>http://yoursite.com/articles/%E7%BA%A2%E9%BB%91%E6%A0%91.html</id>
    <published>2019-12-08T12:54:13.000Z</published>
    <updated>2019-12-16T14:23:12.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><p>每个结点非红即黑，根结点和叶结点为黑色<br>红结点的孩子都是黑结点<br>对每个结点，从该结点到所有后代叶结点的简单路径上，均包含相同数目的黑结点</p><a id="more"></a><h2 id="左旋转操作"><a href="#左旋转操作" class="headerlink" title="左旋转操作"></a>左旋转操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void RBTree::RotateLeft(RBTreeNode* Node) &#123;</span><br><span class="line">RBTreeNode* RNode &#x3D; Node-&gt;right;</span><br><span class="line">Node-&gt;right &#x3D; RNode-&gt;left;</span><br><span class="line">if (RNode-&gt;left !&#x3D; NULL) &#123;</span><br><span class="line">RNode-&gt;left-&gt;parent &#x3D; Node;</span><br><span class="line">&#125;</span><br><span class="line">RNode-&gt;parent&#x3D;Node-&gt;parent; </span><br><span class="line">if (Node-&gt;parent &#x3D;&#x3D; nil) root &#x3D; RNode;</span><br><span class="line">else if (Node-&gt;parent-&gt;left &#x3D;&#x3D; Node) Node-&gt;parent-&gt;left &#x3D; RNode;</span><br><span class="line">else Node-&gt;parent-&gt;right &#x3D; RNode;</span><br><span class="line">RNode-&gt;left &#x3D; Node;</span><br><span class="line">Node-&gt;parent &#x3D; RNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="右旋转操作"><a href="#右旋转操作" class="headerlink" title="右旋转操作"></a>右旋转操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void RBTree::RotateRight(RBTreeNode* Node) &#123;</span><br><span class="line">RBTreeNode* LNode &#x3D; Node-&gt;left;</span><br><span class="line">Node-&gt;left &#x3D; LNode-&gt;right;</span><br><span class="line">if (LNode-&gt;right !&#x3D; NULL) &#123;</span><br><span class="line">LNode-&gt;right-&gt;parent &#x3D; Node;</span><br><span class="line">&#125;</span><br><span class="line">LNode-&gt;parent &#x3D; Node-&gt;parent;</span><br><span class="line">if (Node-&gt;parent &#x3D;&#x3D; nil) root &#x3D; LNode;</span><br><span class="line">else if (Node-&gt;parent-&gt;left &#x3D;&#x3D; Node) Node-&gt;parent-&gt;left &#x3D; LNode;</span><br><span class="line">else Node-&gt;parent-&gt;right &#x3D; LNode;</span><br><span class="line">LNode-&gt;right &#x3D; Node;</span><br><span class="line">Node-&gt;parent &#x3D; LNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//注意：旋转操作中如果旋转结点为红色，且其父结点也是红色，那么旋转之后不会破坏红黑树的最后一条性质</p><h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void RBTree::Insert(RBTreeNode* root,RBTreeNode* NNode) &#123;</span><br><span class="line">RBTreeNode* PNode &#x3D; nil;</span><br><span class="line">RBTreeNode* TempNode &#x3D; root;</span><br><span class="line">while (TempNode !&#x3D; NULL) &#123;</span><br><span class="line">PNode &#x3D; TempNode;</span><br><span class="line">if (val &lt; TempNode-&gt;val) TempNode &#x3D; TempNode-&gt;left;</span><br><span class="line">else TempNode &#x3D; TempNode-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">NNode-&gt;parent &#x3D; PNode;</span><br><span class="line">if (PNode &#x3D;&#x3D; nil) root &#x3D; NNode;</span><br><span class="line">else if (val &lt; PNode-&gt;val) PNode-&gt;left &#x3D; NNode;</span><br><span class="line">else PNode-&gt;right &#x3D; NNode;</span><br><span class="line">NNode-&gt;color&#x3D;RED;&#x2F;&#x2F;记得将插入结点的颜色设为红色</span><br><span class="line">InsertFixup(NNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入的性质修复"><a href="#插入的性质修复" class="headerlink" title="插入的性质修复"></a>插入的性质修复</h2><p>因为插入操作中将插入结点设置为红色，就不会破坏红黑树的最后一条性质，即每个结点到叶结点的简单路径上黑色结点树相同。那么此时若是插入结点的父结点为红色，就会破坏一条红黑树的性质，即红结点的孩子结点都是黑色，只要围绕这条性质来修复即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void RBTree::InsertFixup(RBTreeNode* Node) &#123;</span><br><span class="line">while (Node-&gt;parent-&gt;color &#x3D;&#x3D; RED) &#123;</span><br><span class="line">if (Node-&gt;parent-&gt;parent-&gt;left &#x3D;&#x3D; Node-&gt;parent) &#123;</span><br><span class="line">RBTreeNode* UNode &#x3D; Node-&gt;parent-&gt;parent-&gt;right;</span><br><span class="line">if (UNode-&gt;color &#x3D;&#x3D; RED) &#123;</span><br><span class="line">Node-&gt;parent-&gt;color &#x3D; BLACK;</span><br><span class="line">UNode-&gt;color &#x3D; BLACK;</span><br><span class="line">Node-&gt;parent-&gt;parent &#x3D; RED;</span><br><span class="line">Node &#x3D; Node-&gt;parent-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">else if (Node &#x3D; Node-&gt;parent-&gt;right) &#123;&#x2F;&#x2F;两个结点弄一边</span><br><span class="line">Node &#x3D; Node-&gt;parent;</span><br><span class="line">RotateLeft(Node);</span><br><span class="line">&#125;</span><br><span class="line">Node-&gt;parent-&gt;color &#x3D; BLACK;</span><br><span class="line">Node-&gt;parent-&gt;parent-&gt;color &#x3D; RED;</span><br><span class="line">RotateRight(Node-&gt;parent-&gt;parent);&#x2F;&#x2F;爷结点右转,带动染黑的父结点上移，维护性质</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">RBTreeNode* UNode &#x3D; Node-&gt;parent-&gt;parent-&gt;left;</span><br><span class="line">if (UNode-&gt;color &#x3D;&#x3D; RED) &#123;</span><br><span class="line">UNode-&gt;color &#x3D; BLACK;</span><br><span class="line">Node-&gt;parent-&gt;color &#x3D; BLACK;</span><br><span class="line">Node-&gt;parent-&gt;parent-&gt;color &#x3D; RED;</span><br><span class="line">Node &#x3D; Node-&gt;parent-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">else if (Node-&gt;parent-&gt;left &#x3D; Node) &#123;</span><br><span class="line">Node &#x3D; Node-&gt;parent;</span><br><span class="line">RotateRight(Node);</span><br><span class="line">&#125;</span><br><span class="line">Node-&gt;parent-&gt;color &#x3D; BLACK;</span><br><span class="line">Node-&gt;parent-&gt;parent-&gt;color &#x3D; RED;</span><br><span class="line">RotateLeft(Node-&gt;parent-&gt;parent);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;color &#x3D; BLACK;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心思想：将破坏性质的红色结点（即插入结点的父结点）层层上移直到根，最后然染黑即可</p><h2 id="移植操作"><a href="#移植操作" class="headerlink" title="移植操作"></a>移植操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void RBTree::Transplant(RBTreeNode* Tree, RBTreeNode* GoneTree, RBTreeNode* NewTree) &#123;</span><br><span class="line">if (GoneTree-&gt;parent &#x3D;&#x3D; nil) </span><br><span class="line">root &#x3D; NewTree;</span><br><span class="line">else if (GoneTree &#x3D;&#x3D; GoneTre                                        e-&gt;parent-&gt;left) </span><br><span class="line">GoneTree-&gt;parent-&gt;left &#x3D; NewTree;</span><br><span class="line">else GoneTree-&gt;parent-&gt;right &#x3D; NewTree;</span><br><span class="line">NewTree-&gt;parent &#x3D; GoneTree-&gt;parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">RBTreeNode* RBTree::DeleteNode(RBTreeNode* root,RBTreeNode* Node) &#123;</span><br><span class="line">RBTreeNode* DNode &#x3D; Node;</span><br><span class="line">RBTreeNode* NNode &#x3D; nil;</span><br><span class="line">RBTreeNode* TempNode &#x3D; nil;</span><br><span class="line">TempNode-&gt;color &#x3D; Node-&gt;color;</span><br><span class="line">if (Node-&gt;left &#x3D;&#x3D; nil) &#123;</span><br><span class="line">NNode &#x3D; Node-&gt;right;</span><br><span class="line">Transplant(root, Node, Node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">else if (Node-&gt;right &#x3D;&#x3D; nil) &#123;</span><br><span class="line">NNode &#x3D; Node-&gt;left;</span><br><span class="line">Transplant(root, Node, Node-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">DNode &#x3D; Minimum(Node-&gt;right);</span><br><span class="line">TempNode-&gt;color &#x3D; DNode-&gt;color;</span><br><span class="line">NNode &#x3D; DNode-&gt;right;</span><br><span class="line">if (DNode-&gt;parent !&#x3D; Node) &#123;</span><br><span class="line">Transplant(root, DNode, DNode-&gt;right);</span><br><span class="line">DNode-&gt;right &#x3D; Node-&gt;right;</span><br><span class="line">Node-&gt;right-&gt;parent &#x3D; DNode;</span><br><span class="line">&#125;</span><br><span class="line">Transplant(root, Node, DNode);</span><br><span class="line">DNode-&gt;left &#x3D; Node-&gt;left;</span><br><span class="line">Node-&gt;left-&gt;parent &#x3D; DNode;</span><br><span class="line">DNode-&gt;color &#x3D; Node-&gt;color;</span><br><span class="line">&#125;</span><br><span class="line">if (TempNode-&gt;color &#x3D;&#x3D; BLACK) DeleteFixup(NNode);</span><br><span class="line">return DNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除操作的性质修复"><a href="#删除操作的性质修复" class="headerlink" title="删除操作的性质修复"></a>删除操作的性质修复</h2><p>赋予破坏红黑树性质的结点双色属性，然后致力于将这种双色属性消除，主要是使得兄弟结点的颜色是黑色，并且其右孩子的颜色是红色，在这种情况下就可以消除掉双色结点的双色属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">void RBTree::DeleteFixup(RBTreeNode* Node) &#123;</span><br><span class="line">while (Node !&#x3D; root &amp;&amp; Node-&gt;color &#x3D;&#x3D; BLACK) &#123;</span><br><span class="line">if (Node &#x3D; Node-&gt;parent-&gt;left) &#123;</span><br><span class="line">RBTreeNode* BNode &#x3D; Node-&gt;right;</span><br><span class="line">if (BNode-&gt;color &#x3D;&#x3D; RED) &#123;&#x2F;&#x2F;换个兄弟结点</span><br><span class="line">BNode-&gt;color &#x3D; BLACK;</span><br><span class="line">Node-&gt;parent-&gt;color &#x3D; RED;</span><br><span class="line">RotateLeft(Node-&gt;parent);</span><br><span class="line">BNode &#x3D; Node-&gt;parent-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">if (BNode-&gt;left-&gt;color &#x3D;&#x3D; BLACK &amp;&amp; BNode-&gt;right-&gt;color &#x3D;&#x3D; BLACK) &#123;&#x2F;&#x2F;双色结点上移</span><br><span class="line">BNode-&gt;color &#x3D; RED;</span><br><span class="line">Node &#x3D; Node-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">else if (BNode-&gt;right-&gt;color &#x3D;&#x3D; BLACK) &#123;</span><br><span class="line">&#x2F;&#x2F;换兄弟，使兄弟为黑，其右孩子为红</span><br><span class="line">BNode-&gt;left-&gt;color &#x3D; BLACK;</span><br><span class="line">BNode-&gt;color &#x3D; RED;</span><br><span class="line">RotateRight(BNode);</span><br><span class="line">BNode &#x3D; Node-&gt;parent-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">BNode-&gt;color &#x3D; Node-&gt;parent-&gt;color;</span><br><span class="line">Node-&gt;parent-&gt;color &#x3D; BLACK;</span><br><span class="line">BNode-&gt;right-&gt;color &#x3D; BLACK;</span><br><span class="line">RotateLeft(Node-&gt;parent);</span><br><span class="line">Node &#x3D; root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">RBTreeNode* BNode &#x3D; Node-&gt;parent-&gt;left;</span><br><span class="line">if (BNode-&gt;color &#x3D; RED) &#123;</span><br><span class="line">BNode-&gt;color &#x3D; BLACK;</span><br><span class="line">Node-&gt;parent-&gt;color &#x3D; RED;</span><br><span class="line">RotateRight(Node-&gt;parent);</span><br><span class="line">BNode &#x3D; Node-&gt;parent-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else if (BNode-&gt;left-&gt;color &#x3D;&#x3D; BLACK &amp;&amp; BNode-&gt;right-&gt;color &#x3D;&#x3D; BLACK) &#123;</span><br><span class="line">BNode-&gt;color &#x3D; RED;</span><br><span class="line">Node &#x3D; Node-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">else if (BNode-&gt;left-&gt;color &#x3D;&#x3D; BLACK) &#123;</span><br><span class="line">BNode-&gt;right-&gt;color &#x3D; BLACK;</span><br><span class="line">BNode-&gt;color &#x3D; RED;</span><br><span class="line">RotateLeft(BNode);</span><br><span class="line">BNode &#x3D; Node-&gt;parent-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">BNode-&gt;color &#x3D; Node-&gt;parent-&gt;color;</span><br><span class="line">Node-&gt;parent-&gt;color &#x3D; BLACK;</span><br><span class="line">BNode-&gt;left-&gt;color &#x3D; BLACK;</span><br><span class="line">RotateRight(Node-&gt;parent);</span><br><span class="line">Node &#x3D; root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Node-&gt;color &#x3D; BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;红黑树的性质&quot;&gt;&lt;a href=&quot;#红黑树的性质&quot; class=&quot;headerlink&quot; title=&quot;红黑树的性质&quot;&gt;&lt;/a&gt;红黑树的性质&lt;/h2&gt;&lt;p&gt;每个结点非红即黑，根结点和叶结点为黑色&lt;br&gt;红结点的孩子都是黑结点&lt;br&gt;对每个结点，从该结点到所有后代叶结点的简单路径上，均包含相同数目的黑结点&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法导论" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="树" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E6%A0%91/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>QT基础02</title>
    <link href="http://yoursite.com/articles/QT02.html"/>
    <id>http://yoursite.com/articles/QT02.html</id>
    <published>2019-12-08T06:22:47.000Z</published>
    <updated>2019-12-16T14:17:36.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象树"><a href="#对象树" class="headerlink" title="对象树"></a>对象树</h2><p>当创建的对象在堆区的时候，如果指定的父亲是QObject继承体系中的类，可以不用管理释放的操作，创建的对象会添加到对象树中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn-&gt;setParent(this);</span><br></pre></td></tr></table></figure><a id="more"></a><p>为创建的QObject对象提供一个父对象，会自动将其添加到其父对象的children()列表，当父对象析构的时候，这个列表中的所有对象也会被析构<br>因此在一定程度上简化了内存回收机制</p><h2 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h2><p>连接函数：connect(断开连接用disconnect）<br>参数：信号的发送者，发送的信号（函数地址)，信号的接收者，处理的槽函数（函数地址）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connect(myBtn,&amp;QPushButton::clicked,this,&amp;QWidget::close);</span><br><span class="line">connect(myBtn,&amp;MyPushButton::clicked,this,&amp;MyWidget::close);</span><br><span class="line">&#x2F;&#x2F;信号的接收方如果是this的话可以省略</span><br></pre></td></tr></table></figure><h2 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a>自定义信号和槽</h2><p>自定义信号：写到signals下，返回void，需要声明但不需要实现，可以有参数也可以重载（触发信号使用emit）<br>自定义槽函数：写到public slots下或public或全局函数，返回void，需要声明也需要实现，可以有参数也可以重载<br>注意：当函数发生重载时，在connect中要用函数指针指向具体函数，信号函数和槽函数的参数类型要匹配，信号函数的参数可以多于槽函数的参数，但第一个参数类型要匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void(Teacher::*teacherSignal)(QString)&#x3D;&amp;Teacher::hungry;</span><br><span class="line">void(Student::*studentSlot)(QString)&#x3D;&amp;Student::treat;</span><br><span class="line">connect(zt,teacherSignal,st,StudentSlot);</span><br><span class="line">classIsOver();</span><br></pre></td></tr></table></figure><h2 id="QString转char"><a href="#QString转char" class="headerlink" title="QString转char *"></a>QString转char *</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void Student::treat(QString foodName)&#123;</span><br><span class="line">&#x2F;&#x2F;先转为QByteArray再转为char *</span><br><span class="line">qDebug()&lt;&lt;&quot;请吃饭，要吃：&quot;&lt;&lt;foodName.toUtf8().data();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对象树&quot;&gt;&lt;a href=&quot;#对象树&quot; class=&quot;headerlink&quot; title=&quot;对象树&quot;&gt;&lt;/a&gt;对象树&lt;/h2&gt;&lt;p&gt;当创建的对象在堆区的时候，如果指定的父亲是QObject继承体系中的类，可以不用管理释放的操作，创建的对象会添加到对象树中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;btn-&amp;gt;setParent(this);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="QT使用" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/QT%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="QT" scheme="http://yoursite.com/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="http://yoursite.com/articles/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html"/>
    <id>http://yoursite.com/articles/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</id>
    <published>2019-12-08T04:08:29.000Z</published>
    <updated>2019-12-16T14:22:38.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>二叉搜索树的原理无非就是左孩子的值小于等于父节点，右孩子的值大于等于父节点，所有的操作都是围绕这个原理来实现的<br>随机构造一棵二叉搜索树的期望高度为O（lg n），因此二叉搜索树上的动态集合的基本操作平均运行时间为（lg n）</p><a id="more"></a><h2 id="实现（C-）"><a href="#实现（C-）" class="headerlink" title="实现（C++）"></a>实现（C++）</h2><h3 id="结点的结构体定义"><a href="#结点的结构体定义" class="headerlink" title="结点的结构体定义"></a>结点的结构体定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;二叉树的结点的结构体定义</span><br><span class="line">struct treeNode &#123;</span><br><span class="line">int val;</span><br><span class="line">treeNode* left;</span><br><span class="line">treeNode* right;</span><br><span class="line">treeNode* parent;</span><br><span class="line">treeNode(int x) :val(x),left(NULL),right(NULL),parent(NULL)&#123;   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="搜索操作"><a href="#搜索操作" class="headerlink" title="搜索操作"></a>搜索操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;二叉树的搜索操作实现</span><br><span class="line">treeNode* tree_search(treeNode* tree, int x) &#123;</span><br><span class="line">if (tree &#x3D;&#x3D; NULL || tree-&gt;val &#x3D;&#x3D; x)  return tree;</span><br><span class="line">else if (x &lt; tree-&gt;val) return tree_search(tree-&gt;left, x);</span><br><span class="line">else</span><br><span class="line">return tree_search(tree-&gt;right, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找最大-最小结点"><a href="#查找最大-最小结点" class="headerlink" title="查找最大/最小结点"></a>查找最大/最小结点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;二叉搜索树的最大&#x2F;最小结点</span><br><span class="line">treeNode* treeMin(treeNode* tree) &#123;</span><br><span class="line">if (tree-&gt;left &#x3D;&#x3D; NULL) return tree;</span><br><span class="line">else return treeMin(tree-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line">treeNode* treeMax(treeNode* tree) &#123;</span><br><span class="line">if (tree-&gt;right &#x3D;&#x3D; NULL) return tree;</span><br><span class="line">else return treeMax(tree-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后继结点"><a href="#后继结点" class="headerlink" title="后继结点"></a>后继结点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;二叉搜索树的后继结点</span><br><span class="line">treeNode* successor(treeNode* tree) &#123;</span><br><span class="line">if (tree-&gt;right !&#x3D; NULL) return treeMin(tree-&gt;right);</span><br><span class="line">treeNode* y &#x3D; tree-&gt;parent;</span><br><span class="line">while (y !&#x3D; NULL &amp;&amp; y-&gt;left !&#x3D; tree) &#123;</span><br><span class="line">tree &#x3D; y;</span><br><span class="line">y &#x3D; tree-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">return y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前驱结点"><a href="#前驱结点" class="headerlink" title="前驱结点"></a>前驱结点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;二叉搜索树的前驱结点</span><br><span class="line">treeNode* predecessor(treeNode* tree) &#123;</span><br><span class="line">if (tree-&gt;left !&#x3D; NULL) return treeMax(tree-&gt;left);</span><br><span class="line">treeNode* y &#x3D; tree-&gt;parent;</span><br><span class="line">while (y !&#x3D; NULL &amp;&amp; y-&gt;right !&#x3D; tree) &#123;</span><br><span class="line">tree &#x3D; y;</span><br><span class="line">y &#x3D; tree-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">return y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;二叉树的结点插入操作实现</span><br><span class="line">treeNode* insert(treeNode* tree, treeNode* node) &#123;</span><br><span class="line">treeNode* y &#x3D; NULL;&#x2F;&#x2F;y作为插入结点的父结点</span><br><span class="line">treeNode* x &#x3D; tree;&#x2F;&#x2F;x为插入结点的位置</span><br><span class="line">while (x !&#x3D; NULL) &#123;</span><br><span class="line">y &#x3D; x;</span><br><span class="line">if (node-&gt;val &lt; x-&gt;val) x &#x3D; x-&gt;left;</span><br><span class="line">else x &#x3D; x-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;parent &#x3D; y;</span><br><span class="line">if (y &#x3D;&#x3D; NULL) tree &#x3D; node;</span><br><span class="line">else if (node-&gt;val &lt; y-&gt;val) y-&gt;left &#x3D; node;</span><br><span class="line">else y-&gt;right &#x3D; node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移植操作"><a href="#移植操作" class="headerlink" title="移植操作"></a>移植操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;二叉树删除操作中使用的移植操作实现</span><br><span class="line">void transplant(treeNode* tree, treeNode* u, treeNode* v) &#123;</span><br><span class="line">if (u-&gt;parent &#x3D;&#x3D; NULL) tree &#x3D; v;</span><br><span class="line">else if (u-&gt;parent-&gt;left &#x3D;&#x3D; u) u-&gt;parent-&gt;left &#x3D; v;</span><br><span class="line">else u-&gt;parent-&gt;right &#x3D; v;&#x2F;&#x2F;切断原来的父结点与要被替换的树的联系</span><br><span class="line">if (v !&#x3D; NULL) v-&gt;parent &#x3D; u-&gt;parent;&#x2F;&#x2F;最后才将新的树与其父节点连接</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;二叉搜索树的删除操作</span><br><span class="line">void treeDelete(treeNode* tree, treeNode* node) &#123;</span><br><span class="line">if (node-&gt;left &#x3D;&#x3D; NULL) transplant(tree,node, node-&gt;right);</span><br><span class="line">else if (node-&gt;right &#x3D;&#x3D; NULL) transplant(tree,node, node-&gt;left);</span><br><span class="line">else &#123;</span><br><span class="line">treeNode* y &#x3D; treeMin(node-&gt;right);</span><br><span class="line">if (y-&gt;parent !&#x3D; node) &#123;&#x2F;&#x2F;y不是删除结点的孩子时</span><br><span class="line">transplant(tree, y, y-&gt;right);&#x2F;&#x2F;先将y独立，用其右孩子将其移植</span><br><span class="line">y-&gt;right &#x3D; node-&gt;right;</span><br><span class="line">y-&gt;right-&gt;parent &#x3D; y;</span><br><span class="line">&#125;</span><br><span class="line">transplant(tree, node, y);</span><br><span class="line">y-&gt;left &#x3D; node-&gt;left;&#x2F;&#x2F;左孩子的拼接</span><br><span class="line">y-&gt;left-&gt;parent &#x3D; y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;二叉搜索树的原理无非就是左孩子的值小于等于父节点，右孩子的值大于等于父节点，所有的操作都是围绕这个原理来实现的&lt;br&gt;随机构造一棵二叉搜索树的期望高度为O（lg n），因此二叉搜索树上的动态集合的基本操作平均运行时间为（lg n）&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法导论" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="树" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E6%A0%91/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>QT基础01</title>
    <link href="http://yoursite.com/articles/QT01.html"/>
    <id>http://yoursite.com/articles/QT01.html</id>
    <published>2019-12-07T11:27:09.000Z</published>
    <updated>2019-12-16T14:17:27.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QT简介"><a href="#QT简介" class="headerlink" title="QT简介"></a>QT简介</h2><h3 id="什么是QT"><a href="#什么是QT" class="headerlink" title="什么是QT"></a>什么是QT</h3><p>一个跨平台的C++图形用户界面应用程序框架，面对对象且容易扩展，允许真正的组件编程<br>图形用户界面：GUI，采用图形方式显示的计算机操作用户界面</p><a id="more"></a><h3 id="QT的优点"><a href="#QT的优点" class="headerlink" title="QT的优点"></a>QT的优点</h3><p>跨平台，简化了内存回收机制，开发效率高，可以进行嵌入式开发</p><h3 id="创建QT"><a href="#创建QT" class="headerlink" title="创建QT"></a>创建QT</h3><p>名称不能有中文和空格，保存路径不能有中文路径<br>默认创建有窗口类：myWidget<br>基类有三种选择：QWidget,QMainWindow,QDialog</p><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;widget.h&quot;</span><br><span class="line">#include &lt;QApplication&gt;</span><br><span class="line">&#x2F;&#x2F;程序入口</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QApplication a(argc, argv);</span><br><span class="line">    Widget w;</span><br><span class="line">    w.show();</span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>argc:命令行变量的数量<br>argv:命令行变量的数组<br>QApplication a:应用程序对象，有且仅有一个<br>maWidget w:实例化窗口对象<br>w.show():调用show函数，显示窗口<br>return a.exec():让应用程序进入消息循环机制，代码阻塞到当前行</p><h3 id="widget头文件"><a href="#widget头文件" class="headerlink" title="widget头文件"></a>widget头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#ifndef WIDGET_H</span><br><span class="line">#define WIDGET_H</span><br><span class="line">#include &lt;QWidget&gt;</span><br><span class="line">class Widget : public QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT&#x2F;&#x2F;宏，允许类中使用信号和槽的机制</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Widget(QWidget *parent &#x3D; nullptr);</span><br><span class="line">    ~Widget();</span><br><span class="line">&#125;;</span><br><span class="line">#endif &#x2F;&#x2F; WIDGET_H</span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>注释：ctrl+/<br>查找：ctrl+f<br>整行移动：ctrl+shift+上下<br>帮助文档：F1<br>自动对齐：ctrl+i<br>同名文件切换：F4</p><h3 id="按钮空间常用API"><a href="#按钮空间常用API" class="headerlink" title="按钮空间常用API"></a>按钮空间常用API</h3><p>什么是API：Application Programming Interface ，应用程序接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;widget.h&quot;</span><br><span class="line">#include &lt;QPushButton&gt;</span><br><span class="line">Widget::Widget(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;创建一个按钮</span><br><span class="line">&#x2F;&#x2F; QPushButton *btn&#x3D;new QPushButton;</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F;btn-&gt;show();&#x2F;&#x2F;以顶层方式弹出窗口控件</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F;让btn对象依赖在widget窗口</span><br><span class="line">&#x2F;&#x2F; btn-&gt;setParent(this);</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F;设置文本</span><br><span class="line">&#x2F;&#x2F; btn-&gt;setText(&quot;第一个按钮&quot;);</span><br><span class="line">     &#x2F;&#x2F;创建第二个按钮,按照控件大小创建窗口</span><br><span class="line">    QPushButton *btn&#x3D;new QPushButton(&quot;第二个按钮&quot;,this);</span><br><span class="line">    &#x2F;&#x2F;设置窗口大小</span><br><span class="line">    resize(600,400);</span><br><span class="line">    &#x2F;&#x2F;设置固定窗口大小</span><br><span class="line">    setFixedSize(600,400);</span><br><span class="line">    &#x2F;&#x2F;移动按钮</span><br><span class="line">    btn-&gt;move(100,100);</span><br><span class="line">    &#x2F;&#x2F;设置窗口标题</span><br><span class="line">    setWindowTitle(&quot;第一个窗口&quot;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;QT简介&quot;&gt;&lt;a href=&quot;#QT简介&quot; class=&quot;headerlink&quot; title=&quot;QT简介&quot;&gt;&lt;/a&gt;QT简介&lt;/h2&gt;&lt;h3 id=&quot;什么是QT&quot;&gt;&lt;a href=&quot;#什么是QT&quot; class=&quot;headerlink&quot; title=&quot;什么是QT&quot;&gt;&lt;/a&gt;什么是QT&lt;/h3&gt;&lt;p&gt;一个跨平台的C++图形用户界面应用程序框架，面对对象且容易扩展，允许真正的组件编程&lt;br&gt;图形用户界面：GUI，采用图形方式显示的计算机操作用户界面&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="QT使用" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/QT%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="QT" scheme="http://yoursite.com/tags/QT/"/>
    
  </entry>
  
</feed>
